@inproceedings{matsakis2014rust,
  title={The rust language},
  author={Matsakis, Nicholas D and Klock II, Felix S},
  booktitle={ACM SIGAda Ada Letters},
  volume={34},
  number={3},
  pages={103--104},
  year={2014},
  organization={ACM}
}

@article{verus,
author = {Lattuada, Andrea and Hance, Travis and Cho, Chanhee and Brun, Matthias and Subasinghe, Isitha and Zhou, Yi and Howell, Jon and Parno, Bryan and Hawblitzel, Chris},
title = {Verus: Verifying Rust Programs using Linear Ghost Types},
year = {2023},
issue_date = {April 2023},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {7},
number = {OOPSLA1},
url = {https://doi.org/10.1145/3586037},
doi = {10.1145/3586037},
abstract = {The Rust programming language provides a powerful type system that checks linearity and borrowing, allowing code to safely manipulate memory without garbage collection and making Rust ideal for developing low-level, high-assurance systems. For such systems, formal verification can be useful to prove functional correctness properties beyond type safety. This paper presents Verus, an SMT-based tool for formally verifying Rust programs.  
With Verus, programmers express proofs and specifications using the Rust language, allowing proofs to take advantage of Rust's linear types and borrow checking. We show how this allows proofs to manipulate linearly typed permissions that let Rust code safely manipulate memory, pointers, and concurrent resources. Verus organizes proofs and specifications using a novel mode system that distinguishes specifications, which are not checked for linearity and borrowing, from executable code and proofs, which are checked for linearity and borrowing.  
We formalize Verus' linearity, borrowing, and modes in a small lambda calculus, for which we prove type safety and termination of specifications and proofs. We demonstrate Verus on a series of examples, including pointer-manipulating code (an xor-based doubly linked list), code with interior mutability, and concurrent code.},
journal = {Proc. ACM Program. Lang.},
month = apr,
articleno = {85},
numpages = {30},
keywords = {Rust, linear types, systems verification}
}


@INPROCEEDINGS{kani,
  author={VanHattum, Alexa and Schwartz-Narbonne, Daniel and Chong, Nathan and Sampson, Adrian},
  booktitle={2022 IEEE/ACM 44th International Conference on Software Engineering: Software Engineering in Practice (ICSE-SEIP)}, 
  title={Verifying Dynamic Trait Objects in Rust}, 
  year={2022},
  volume={},
  number={},
  pages={321-330},
  keywords={Codes;Semantics;Ecosystems;Libraries;Safety;Reliability;Virtualization;Rust;verification;model checking;dynamic dispatch},
  doi={10.1145/3510457.3513031}}

@misc{kroening2023cbmccboundedmodel,
      title={CBMC: The C Bounded Model Checker}, 
      author={Daniel Kroening and Peter Schrammel and Michael Tautschnig},
      year={2023},
      eprint={2302.02384},
      archivePrefix={arXiv},
      primaryClass={cs.SE},
      url={https://arxiv.org/abs/2302.02384}, 
}

@misc{foroushaani2022modularformalverificationrust,
      title={Modular Formal Verification of Rust Programs with Unsafe Blocks}, 
      author={Nima Rahimi Foroushaani and Bart Jacobs},
      year={2022},
      eprint={2212.12976},
      archivePrefix={arXiv},
      primaryClass={cs.LO},
      url={https://arxiv.org/abs/2212.12976}, 
}

@article{RefinedRust,
author = {G\"{a}her, Lennard and Sammler, Michael and Jung, Ralf and Krebbers, Robbert and Dreyer, Derek},
title = {RefinedRust: A Type System for High-Assurance Verification of Rust Programs},
year = {2024},
issue_date = {June 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {8},
number = {PLDI},
url = {https://doi.org/10.1145/3656422},
doi = {10.1145/3656422},
abstract = {Rust is a modern systems programming language whose ownership-based type system statically guarantees memory safety, making it particularly well-suited to the domain of safety-critical systems. In recent years, a wellspring of automated deductive verification tools have emerged for establishing functional correctness of Rust code. However, none of the previous tools produce foundational proofs (machine-checkable in a general-purpose proof assistant), and all of them are restricted to the safe fragment of Rust. This is a problem because the vast majority of Rust programs make use of unsafe code at critical points, such as in the implementation of widely-used APIs. We propose RefinedRust, a refinement type system—proven sound in the Coq proof assistant—with the goal of establishing foundational semi-automated functional correctness verification of both safe and unsafe Rust code. We have developed a prototype verification tool implementing RefinedRust. Our tool translates Rust code (with user annotations) into a model of Rust embedded in Coq, and then checks its adherence to the RefinedRust type system using separation logic automation in Coq. All proofs generated by RefinedRust are checked by the Coq proof assistant, so the automation and type system do not have to be trusted. We evaluate the effectiveness of RefinedRust by verifying a variant of Rust’s Vec implementation that involves intricate reasoning about unsafe pointer-manipulating code.},
journal = {Proc. ACM Program. Lang.},
month = jun,
articleno = {192},
numpages = {25},
keywords = {Iris, Rust, program verification, separation logic}
}


@misc{Qwaz_rust-cve,
  author       = {Qwaz},
  title        = {rust-cve: CVEs for the Rust standard library},
  year         = {2025},
  publisher    = {GitHub},
  howpublished = {\url{https://github.com/Qwaz/rust-cve}},
  note         = {GitHub repository, accessed on March 3, 2025}
}
